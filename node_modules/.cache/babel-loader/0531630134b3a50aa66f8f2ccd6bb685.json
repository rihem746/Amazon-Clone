{"ast":null,"code":"var _jsxFileName = \"/home/rihem/Bureau/amazon-clone/src/StateProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useReducer } from \"react\"; // prepares the dataLayer\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StateContext = /*#__PURE__*/createContext(); // wrap our app and provide the Data layer\n\nexport const StateProvider = _ref => {\n  _s();\n\n  let {\n    reducer,\n    initialState,\n    children\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(StateContext.Provider, {\n    value: useReducer(reducer, initialState),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 3\n  }, this);\n}; // pull information from the data layer\n\n_s(StateProvider, \"skVOqNGrFQuDFh+lpttAJ2AZFeA=\");\n\n_c = StateProvider;\nexport const useStateValue = () => {\n  _s2();\n\n  return useContext(StateContext);\n};\n\n_s2(useStateValue, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"StateProvider\");","map":{"version":3,"sources":["/home/rihem/Bureau/amazon-clone/src/StateProvider.js"],"names":["React","createContext","useContext","useReducer","StateContext","StateProvider","reducer","initialState","children","useStateValue"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,QAA6D,OAA7D,C,CAEA;;;AACA,OAAO,MAAMC,YAAY,gBAAGH,aAAa,EAAlC,C,CAEP;;AACA,OAAO,MAAMI,aAAa,GAAG;AAAA;;AAAA,MAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA;AAAzB,GAAD;AAAA,sBAC3B,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEL,UAAU,CAACG,OAAD,EAAUC,YAAV,CAAxC;AAAA,cACGC;AADH;AAAA;AAAA;AAAA;AAAA,UAD2B;AAAA,CAAtB,C,CAMP;;GANaH,a;;KAAAA,a;AAOb,OAAO,MAAMI,aAAa,GAAG;AAAA;;AAAA,SAAMP,UAAU,CAACE,YAAD,CAAhB;AAAA,CAAtB;;IAAMK,a","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\n\n// prepares the dataLayer\nexport const StateContext = createContext();\n\n// wrap our app and provide the Data layer\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\n// pull information from the data layer\nexport const useStateValue = () => useContext(StateContext);"]},"metadata":{},"sourceType":"module"}